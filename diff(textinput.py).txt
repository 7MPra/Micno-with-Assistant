--- orig_textinput.py	2020-06-17 19:11:53.865765877 +0900
+++ textinput.py	2020-06-17 19:28:12.412526836 +0900
@@ -12,7 +12,10 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-"""Sample that implements a text client for the Google Assistant Service."""
+import sys
+from PyQt5.QtCore import QUrl
+from PyQt5.QtWidgets import QApplication
+from PyQt5.QtWebEngineWidgets import QWebEngineView
 
 import os
 import logging
@@ -31,11 +34,9 @@
 try:
     from . import (
         assistant_helpers,
-        browser_helpers,
     )
 except (SystemError, ImportError):
     import assistant_helpers
-    import browser_helpers
 
 
 ASSISTANT_API_ENDPOINT = 'embeddedassistant.googleapis.com'
@@ -43,26 +44,17 @@
 PLAYING = embedded_assistant_pb2.ScreenOutConfig.PLAYING
 
 
-class SampleTextAssistant(object):
-    """Sample Assistant that supports text based conversations.
+class TextAssistant(object):
 
-    Args:
-      language_code: language for the conversation.
-      device_model_id: identifier of the device model.
-      device_id: identifier of the registered device instance.
-      display: enable visual display of assistant response.
-      channel: authorized gRPC channel for connection to the
-        Google Assistant API.
-      deadline_sec: gRPC deadline in seconds for Google Assistant API call.
-    """
-
-    def __init__(self, language_code, device_model_id, device_id,
+    def __init__(self, language_code, query, device_model_id, device_id,
                  display, channel, deadline_sec):
         self.language_code = language_code
         self.device_model_id = device_model_id
         self.device_id = device_id
         self.conversation_state = None
-        # Force reset of first conversation.
+
+        self.query = query
+
         self.is_new_conversation = True
         self.display = display
         self.assistant = embedded_assistant_pb2_grpc.EmbeddedAssistantStub(
@@ -98,7 +90,8 @@
                 ),
                 text_query=text_query,
             )
-            # Continue current conversation with later requests.
+
+
             self.is_new_conversation = False
             if self.display:
                 config.screen_out_config.screen_mode = PLAYING
@@ -144,22 +137,23 @@
                      'using a unique id and a new device config is saved')))
 @click.option('--lang', show_default=True,
               metavar='<language code>',
-              default='en-US',
+              default='ja-JP',
               help='Language code of the Assistant')
-@click.option('--display', is_flag=True, default=False,
-              help='Enable visual display of Assistant responses in HTML.')
+@click.option('--query',
+              metavar='<query>',
+              required=True,
+              help='Query to send to assistant')
 @click.option('--verbose', '-v', is_flag=True, default=False,
               help='Verbose logging.')
 @click.option('--grpc-deadline', default=DEFAULT_GRPC_DEADLINE,
               metavar='<grpc deadline>', show_default=True,
               help='gRPC deadline in seconds')
 def main(api_endpoint, credentials,
-         device_model_id, device_id, lang, display, verbose,
+         device_model_id, device_id, lang, query, verbose,
          grpc_deadline, *args, **kwargs):
-    # Setup logging.
+
     logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO)
 
-    # Load OAuth 2.0 credentials.
     try:
         with open(credentials, 'r') as f:
             credentials = google.oauth2.credentials.Credentials(token=None,
@@ -172,23 +166,28 @@
                       'new OAuth 2.0 credentials.')
         return
 
-    # Create an authorized gRPC channel.
     grpc_channel = google.auth.transport.grpc.secure_authorized_channel(
         credentials, http_request, api_endpoint)
     logging.info('Connecting to %s', api_endpoint)
 
-    with SampleTextAssistant(lang, device_model_id, device_id, display,
+    with TextAssistant(lang, query, device_model_id, device_id, True,
                              grpc_channel, grpc_deadline) as assistant:
-        while True:
-            query = click.prompt('')
-            click.echo('<you> %s' % query)
-            response_text, response_html = assistant.assist(text_query=query)
-            if display and response_html:
-                system_browser = browser_helpers.system_browser
-                system_browser.display(response_html)
-            if response_text:
-                click.echo('<@assistant> %s' % response_text)
-
+        response_text, response_html = assistant.assist(text_query=query)
+        html_file = open("{}/html/index.html".format(os.path.dirname(os.path.abspath(__file__))),"w")
+        html_file.write(response_html.decode('utf-8'))
+        html_file.close()
+        web_app = QApplication(sys.argv)
+        web_view = QWebEngineView()
+        web_view.load(QUrl.fromLocalFile('{}/html/index.html'.format(os.path.dirname(os.path.abspath(__file__)))))
+        web_view.setZoomFactor(web_view.zoomFactor()*0.4)
+        web_view.resize(700, 350)
+        web_view.setWindowTitle('Micno with Assistant')
+        desktop = web_app.desktop()
+        geometry = desktop.screenGeometry()
+        framesize = web_view.frameSize()
+        web_view.move(geometry.width() - framesize.width(), geometry.height() - framesize.height())
+        web_view.show()
+        web_app.exec()
 
 if __name__ == '__main__':
     main()
